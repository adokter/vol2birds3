#!/usr/bin/python
import sys
import boto3
import os
import shutil
import gzip
import tempfile
import getopt
from subprocess import call
from shutil import copyfile
from botocore.exceptions import ClientError
from datetime import datetime
from os import path

def main(argv):
   me = sys.argv[0] 

   clut = False
   config = ''
   key = ''
   prefix = ''
   source = 'noaa-nexrad-level2'
   bucket = 'is-birdcast-observed'
   aws = False
   docker = False

   try:
      opts, args = getopt.getopt(argv,"haco:s:k:b:p:",["help","aws","clut","opts=","source=","key=","bucket=","prefix="])
   except getopt.GetoptError:
      print("error: unrecognised arguments")
      printSyntax(me)
      sys.exit(2)
   for opt, arg in opts:
      if opt in ('-h', "--help"):
         printSyntax(me)
         printOptions()
         sys.exit()
      elif opt in ("-c", "--clut"):
         clut = True
      elif opt in ("-k", "--key"):
         key = arg
      elif opt in ("-o","--opts"):
         config = arg
      elif opt in ("-s","--source"):
         source = arg
      elif opt in ("-b","--bucket"):
         bucket = arg
      elif opt in ("-p","--prefix"):
         prefix = arg
      elif opt in ("-a", "--aws"):
         aws = True
   if not(key != ''):
      print("error: key required of a file in noaa-nexrad-level2 bucket")
      printSyntax(me)
      sys.exit()

   # check whether we are inside a Docker container
   fcgroup="/proc/1/cgroup"
   if os.path.exists(fcgroup):
      with open(fcgroup, "r") as cgroupfile:
         if "docker" in cgroupfile.read():
             docker=True

   # store the current working directory
   cwd = os.getcwd()

   # make a temporary directory to store the radar data to be downloaded
   tmppath=tempfile.mkdtemp()
   # change the working directory to the new temporary directory
   os.chdir(tmppath)
   
   s3 = boto3.resource('s3')

   localfile = os.path.basename(key)
   radar = os.path.basename(key)[0:4]
   date_object = datetime.strptime(os.path.basename(key)[4:19], '%Y%m%d_%H%M%S')
   date=date_object.strftime("%Y/%m/%d")

   s3.Bucket(source).download_file(key, localfile)

   NFile = len(os.listdir(tmppath))

   if NFile == 0:
      sys.stderr.write("Error: no downloaded file found\n")
      shutil.rmtree(tmppath)
      sys.exit()

   # write an option file if opts argument is set
   # should contain option.conf statements separated by \n
   if config != '':
      optsfile = open("options.conf", "w")
      optsfile.write(config.replace('\\n', '\n'))
      optsfile.close()

   # append cluttermap filename to options.conf
   if docker:
      if clut:
         if os.path.exists("options.conf"):
            mode="a"
         else:
            mode="w"
         optsfile =  open("options.conf", mode)
         optsfile.write("\nUSE_CLUTTERMAP=TRUE\nCLUTTERMAP=/opt/occult/"+radar+".h5")
         optsfile.close()

   # construct output filename from input argument string
   fout=localfile+".txt"
   h5file=localfile+".h5"
   s3file=prefix+"/"+radar+"/"+date+"/"+h5file

   with open(fout, "a") as myfile:
      mynull = open('/dev/null', 'w')
      # process the volume file with vol2bird, write to myfile
      call(["vol2bird",localfile,h5file],stdout=myfile,stderr=mynull)
      myfile.close()
      mynull.close()

   if path.exists(h5file):
      # upload the output to s3
      if aws:
         s3_client = boto3.client('s3')
         try:
            response = s3_client.upload_file(h5file, bucket, s3file)
         except ClientError as e:
            logging.error(e)
            return False
      else:
         if docker:
            copyfile(h5file,'/data/'+hfile)
         else:
            copyfile(h5file,cwd+'/'+h5file)
   else:
      print("Error: no h5 file generated by vol2bird")
      return False

   # clean up 
   shutil.rmtree(tmppath)

def printSyntax(me):
    print('Usage: ')
    print('  '+me+' --key <key> [--opts <options>] [--bucket <bucket>] [--prefix <prefix>] [--aws] [--clut]')
    print('  '+me+' -h | --help')

def printOptions():
    print('\nOptions:')
    print('  -h --help     Show this screen')
    print('  -k --key      Key in noaa-nexrad-level2 bucket of file to process')
    print('  -o --opts     The lines to write to the options.conf configuration file, separate lines by "\\n"')
    print('  -b --bucket   The AWS bucket name where profiles will be stored [default: vol2bird]')
    print('  -p --prefix   The AWS prefix (i.e. bucket postfix) to add to the filename for storing profiles')
    print('  -c --clut     Use cluttermap [docker container option only, ignored otherwise]')
    print('  -a --aws      Store output in bucket on aws')
 
if __name__ == "__main__":
   main(sys.argv[1:])
